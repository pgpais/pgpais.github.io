{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","About","Contact","href","App","className","Breadcrumbs","to","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RA8CMA,EAAO,kBAAM,sCAEbC,EAAQ,kBAAM,uCAEdC,EAAU,kBACZ,uCACW,uBAAGC,KAAM,4BAAT,uBAGAC,EAjDH,WACV,OAAO,yBAAKC,UAAU,OACd,kBAAC,IAAD,KACI,4BAAQA,UAAU,cACd,yBAAKA,UAAU,eACX,4CAEJ,kBAACC,EAAA,EAAD,CAAaD,UAAU,cACnB,kBAAC,IAAD,CAAYE,GAAI,KAAhB,QAGA,kBAAC,IAAD,CAAYA,GAAI,UAAhB,YAGA,kBAAC,IAAD,CAAYA,GAAI,aAAhB,YAGA,kBAAC,IAAD,CAAYA,GAAI,YAAhB,gBAMR,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,UACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,SAKhB,oFC9BcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed89926f.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Breadcrumbs, Link} from \"@material-ui/core\";\r\nimport {Switch, Route, BrowserRouter as Router, Link as RouterLink} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n  return <div className=\"App\">\r\n          <Router>\r\n              <header className=\"App-header\">\r\n                  <div className=\"Header-name\">\r\n                      <p> Pedro Pais </p>\r\n                  </div>\r\n                  <Breadcrumbs className=\"Header-nav\">\r\n                      <RouterLink to={\"/\"}>\r\n                          Home\r\n                      </RouterLink>\r\n                      <RouterLink to={\"/about\"}>\r\n                          About me\r\n                      </RouterLink>\r\n                      <RouterLink to={\"/projects\"}>\r\n                          Projects\r\n                      </RouterLink>\r\n                      <RouterLink to={\"/contact\"}>\r\n                          Contact me\r\n                      </RouterLink>\r\n                  </Breadcrumbs>\r\n              </header>\r\n\r\n              <Switch>\r\n                  <Route path=\"/about\">\r\n                      <About/>\r\n                  </Route>\r\n                  <Route path=\"/contact\">\r\n                      <Contact/>\r\n                  </Route>\r\n                  <Route path=\"/\">\r\n                      <Home/>\r\n                  </Route>\r\n              </Switch>\r\n          </Router>\r\n\r\n      <h1> This page is under development. Check back later.</h1>\r\n  </div>;\r\n};\r\n\r\nconst Home = () => <div>Home</div>\r\n\r\nconst About = () => <div>About</div>\r\n\r\nconst Contact = () =>\r\n    <div>\r\n        Email: <a href={\"mailto:ppais95@gmail.com\"}>ppais95@gmail.com</a>\r\n    </div>\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}